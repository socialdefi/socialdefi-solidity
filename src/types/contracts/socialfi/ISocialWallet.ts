/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMaker {
  export type MetadataStruct = {
    sku: PromiseOrValue<string>;
    skuQuantityOrId: PromiseOrValue<BigNumberish>;
    paymentCurrency: PromiseOrValue<string>;
    priceQuantityOrId: PromiseOrValue<BigNumberish>;
    skuType: PromiseOrValue<BigNumberish>;
    paymentCurrencyType: PromiseOrValue<BigNumberish>;
  };

  export type MetadataStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sku: string;
    skuQuantityOrId: BigNumber;
    paymentCurrency: string;
    priceQuantityOrId: BigNumber;
    skuType: BigNumber;
    paymentCurrencyType: BigNumber;
  };
}

export interface ISocialWalletInterface extends utils.Interface {
  functions: {
    "closeMaker(uint256)": FunctionFragment;
    "closeTaker(uint256)": FunctionFragment;
    "mintMaker((address,uint256,address,uint256,uint128,uint128),address)": FunctionFragment;
    "mintTaker(address,address,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeMaker"
      | "closeTaker"
      | "mintMaker"
      | "mintTaker"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeMaker",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTaker",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMaker",
    values: [IMaker.MetadataStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTaker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "closeMaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeTaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISocialWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISocialWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeMaker(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTaker(
      takerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMaker(
      maker_: IMaker.MetadataStruct,
      dex_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTaker(
      depsoitFrom_: PromiseOrValue<string>,
      maker_: PromiseOrValue<string>,
      makerId_: PromiseOrValue<BigNumberish>,
      requestSkuQuantityOrId_: PromiseOrValue<BigNumberish>,
      requestPriceQuantityOrId_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  closeMaker(
    makerId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTaker(
    takerId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMaker(
    maker_: IMaker.MetadataStruct,
    dex_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTaker(
    depsoitFrom_: PromiseOrValue<string>,
    maker_: PromiseOrValue<string>,
    makerId_: PromiseOrValue<BigNumberish>,
    requestSkuQuantityOrId_: PromiseOrValue<BigNumberish>,
    requestPriceQuantityOrId_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    closeMaker(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTaker(
      takerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMaker(
      maker_: IMaker.MetadataStruct,
      dex_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTaker(
      depsoitFrom_: PromiseOrValue<string>,
      maker_: PromiseOrValue<string>,
      makerId_: PromiseOrValue<BigNumberish>,
      requestSkuQuantityOrId_: PromiseOrValue<BigNumberish>,
      requestPriceQuantityOrId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    closeMaker(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTaker(
      takerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMaker(
      maker_: IMaker.MetadataStruct,
      dex_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTaker(
      depsoitFrom_: PromiseOrValue<string>,
      maker_: PromiseOrValue<string>,
      makerId_: PromiseOrValue<BigNumberish>,
      requestSkuQuantityOrId_: PromiseOrValue<BigNumberish>,
      requestPriceQuantityOrId_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeMaker(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTaker(
      takerId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMaker(
      maker_: IMaker.MetadataStruct,
      dex_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTaker(
      depsoitFrom_: PromiseOrValue<string>,
      maker_: PromiseOrValue<string>,
      makerId_: PromiseOrValue<BigNumberish>,
      requestSkuQuantityOrId_: PromiseOrValue<BigNumberish>,
      requestPriceQuantityOrId_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
