/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMaker {
  export type MetadataStruct = {
    sku: PromiseOrValue<string>;
    skuQuantityOrId: PromiseOrValue<BigNumberish>;
    paymentCurrency: PromiseOrValue<string>;
    priceQuantityOrId: PromiseOrValue<BigNumberish>;
    skuType: PromiseOrValue<BigNumberish>;
    paymentCurrencyType: PromiseOrValue<BigNumberish>;
  };

  export type MetadataStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sku: string;
    skuQuantityOrId: BigNumber;
    paymentCurrency: string;
    priceQuantityOrId: BigNumber;
    skuType: BigNumber;
    paymentCurrencyType: BigNumber;
  };
}

export interface MakerInterface extends utils.Interface {
  functions: {
    "approveDex(uint256,address)": FunctionFragment;
    "makerByIndex(uint256)": FunctionFragment;
    "makerMetadata(uint256)": FunctionFragment;
    "totalSupplyOfMaker()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveDex"
      | "makerByIndex"
      | "makerMetadata"
      | "totalSupplyOfMaker"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveDex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOfMaker",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approveDex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOfMaker",
    data: BytesLike
  ): Result;

  events: {
    "MakerBurn(address,uint256)": EventFragment;
    "MakerMint(address,uint256,address)": EventFragment;
    "MakerUpdate(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MakerBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerUpdate"): EventFragment;
}

export interface MakerBurnEventObject {
  from_: string;
  tokenId_: BigNumber;
}
export type MakerBurnEvent = TypedEvent<
  [string, BigNumber],
  MakerBurnEventObject
>;

export type MakerBurnEventFilter = TypedEventFilter<MakerBurnEvent>;

export interface MakerMintEventObject {
  from_: string;
  tokenId_: BigNumber;
  dex_: string;
}
export type MakerMintEvent = TypedEvent<
  [string, BigNumber, string],
  MakerMintEventObject
>;

export type MakerMintEventFilter = TypedEventFilter<MakerMintEvent>;

export interface MakerUpdateEventObject {
  from_: string;
  tokenId_: BigNumber;
  settleSkuQuantityOrId_: BigNumber;
  settlePaymentOrId_: BigNumber;
}
export type MakerUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  MakerUpdateEventObject
>;

export type MakerUpdateEventFilter = TypedEventFilter<MakerUpdateEvent>;

export interface Maker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveDex(
      makerId_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerByIndex(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { makerId_: BigNumber }>;

    makerMetadata(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMaker.MetadataStructOutput, BigNumber, BigNumber, string] & {
        maker_: IMaker.MetadataStructOutput;
        sentSkuQuantityOrId_: BigNumber;
        receivedPaymentQuantityOrId_: BigNumber;
        dex_: string;
      }
    >;

    totalSupplyOfMaker(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;
  };

  approveDex(
    makerId_: PromiseOrValue<BigNumberish>,
    to_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerByIndex(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makerMetadata(
    makerId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [IMaker.MetadataStructOutput, BigNumber, BigNumber, string] & {
      maker_: IMaker.MetadataStructOutput;
      sentSkuQuantityOrId_: BigNumber;
      receivedPaymentQuantityOrId_: BigNumber;
      dex_: string;
    }
  >;

  totalSupplyOfMaker(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approveDex(
      makerId_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    makerByIndex(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerMetadata(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMaker.MetadataStructOutput, BigNumber, BigNumber, string] & {
        maker_: IMaker.MetadataStructOutput;
        sentSkuQuantityOrId_: BigNumber;
        receivedPaymentQuantityOrId_: BigNumber;
        dex_: string;
      }
    >;

    totalSupplyOfMaker(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MakerBurn(address,uint256)"(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null
    ): MakerBurnEventFilter;
    MakerBurn(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null
    ): MakerBurnEventFilter;

    "MakerMint(address,uint256,address)"(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null,
      dex_?: PromiseOrValue<string> | null
    ): MakerMintEventFilter;
    MakerMint(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null,
      dex_?: PromiseOrValue<string> | null
    ): MakerMintEventFilter;

    "MakerUpdate(address,uint256,uint256,uint256)"(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null,
      settleSkuQuantityOrId_?: null,
      settlePaymentOrId_?: null
    ): MakerUpdateEventFilter;
    MakerUpdate(
      from_?: PromiseOrValue<string> | null,
      tokenId_?: PromiseOrValue<BigNumberish> | null,
      settleSkuQuantityOrId_?: null,
      settlePaymentOrId_?: null
    ): MakerUpdateEventFilter;
  };

  estimateGas: {
    approveDex(
      makerId_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerByIndex(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerMetadata(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOfMaker(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveDex(
      makerId_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerByIndex(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerMetadata(
      makerId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOfMaker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
